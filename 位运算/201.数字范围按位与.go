/**
* 说下我的理解：二进制数+1的时候，一定存在一个规律：如果末尾开始的第一个0置为1后面全部取反：如
   010111 + 1 = 011000
   011111 + 1 = 100000
   进行与运算后 ，相同前缀部分不变，后置位全部归0：
   010111 & 011000 = 010000
   011111 & 100000 = 000000
   现在求a,a+1,a+2,a+3....a+n的与运算结果，就是求他们的公共前缀，后面全部置0
   可以用数学归纳法证明：他们的共同前缀就是a和a+n的公共前缀，后面全部置0
*/
// go中这个用 &^符号  ^是按位取反
// go如果是 a^b 是按位异或  ^a是按位取反
// &^是按位与取反
// x &^ y 这个表达式的意思是：将 x 中 y 为 1 的位清零，其它位保持不变
func rangeBitwiseAnd(left int, right int) int {
	// m = 二进制位数(len) = 最高位1的位置+1
	x := uint(left ^ right)
	m := 0
	for x != 0 {
		m++
		x >>= 1
	}
	// 清零 left 的低 m 位：left &^ ((1<<m) - 1)
	return left &^ ((1 << m) - 1)
}