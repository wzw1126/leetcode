
//异或的本质上是在每个比特位上做模2的加法
//这题是有一个数出现一次，其他数出现三次
//设只出现一次的那个数为 x。用二进制思考：
//如果 x 的某个比特是 0，由于其余数字都出现了 3 次，所以 nums 的所有元素在这个比特位上的 1 的个数是 3 的倍数。
//如果 x 的某个比特是 1，由于其余数字都出现了 3 次，所以 nums 的所有元素在这个比特位上的 1 的个数除 3 余 1。
//解题思想：统计每个比特位的1的个数，然后对3取模，剩下的就是只出现一次的那个数在该比特位上的值
//如果按列的思想就是一个数全部算完，再算下一个数
//如果按行的思想就是每个数算一遍所有的比特位
//按行的思想更好理解一些，下面就是按行的思想
func singleNumber(nums []int) int {

    ans:=0
    for i:=0;i<32;i++{
        cnt:=0
        for _,v:=range nums{
            cnt+=v>>i &1 //统计每个比特位的1的个数
        }
        ans |=cnt%3 <<i //对3取模，剩下的就是只出现一次的那个数在该比特位上的值
    }
    return ans
    
}